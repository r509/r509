#r509 [![Build Status](https://secure.travis-ci.org/reaperhulk/r509.png)](http://travis-ci.org/reaperhulk/r509) [![Coverage Status](https://coveralls.io/repos/reaperhulk/r509/badge.png?branch=master)](https://coveralls.io/r/reaperhulk/r509?branch=master)
r509 is a Ruby gem built using OpenSSL that is designed to ease management of a public key infrastructure. The r509 API facilitates easy creation of CSRs, signing of certificates, revocation (CRL/OCSP), and much more. Together with projects like [r509-ocsp-responder](https://github.com/reaperhulk/r509-ocsp-responder) and [r509-ca-http](https://github.com/sirsean/r509-ca-http) it is intended to be a complete [RFC 5280](http://www.ietf.org/rfc/rfc5280.txt)-compliant certificate authority for use in production environments.

##Requirements

r509 requires the Ruby OpenSSL bindings as well as yaml support (present by default in modern Ruby builds). It is recommended that you compile Ruby against OpenSSL 1.0.0+ (with elliptic curve support enabled). Red Hat-derived distributions ship with EC disabled in OpenSSL, so if you need EC support you will need to recompile.

##Installation
You can install via rubygems with ```gem install r509```

To install the gem from your own clone (you will need to satisfy the dependencies via ```bundle install``` or other means):

```bash
rake gem:build
rake gem:install
```

##Running Tests/Building Gem
If you want to run the tests for r509 you'll need rspec. Additionally, you may want to install rcov/simplecov (ruby 1.8/1.9 respectively) and yard for running the code coverage and documentation tasks in the Rakefile. ```rake -T``` for a complete list of rake tasks available.

##Continuous Integration
We run continuous integration tests (using Travis-CI) against 1.9.3, 2.0.0, ruby-head, and rubinius(rbx) 2.0 in 1.9 mode. 1.8.7 is no longer a supported configuration due to issues with its elliptic curve methods. 0.8.1 was the last official r509 release with 1.8.7 support. It is highly recommended that you use Ruby 1.9.3 or later.

##Executable

Inside the gem there is a binary named ```r509```. Type ```r509 -h``` to see a list of options.

##Basic Certificate Authority Howto
[This guide](http://langui.sh/2012/11/02/building-a-ca-r509-howto/) provides instructions on building a basic CA using r509, [r509-ca-http](https://github.com/sirsean/r509-ca-http), and [r509-ocsp-responder](https://github.com/reaperhulk/r509-ocsp-responder). In it you will learn how to create a root, set up the configuration profiles, issue certificates, revoke certificates, and see responses from an OCSP responder.

##Usage
###CSR
To generate a 2048-bit RSA CSR

```ruby
csr = R509::CSR.new(
  :subject => [
    ['CN','somedomain.com'],
    ['O','My Org'],
    ['L','City'],
    ['ST','State'],
    ['C','US']
  ]
)
# alternately
csr = R509::CSR.new(
  :subject => {
    :CN => 'somedomain.com',
    :O => 'My Org',
    :L => 'City',
    :ST => 'State',
    :C => 'US'
  }
)

```

Another way to build the subject:

```ruby
subject = R509::Subject.new
subject.CN="somedomain.com"
subject.O="My Org"
subject.L="City"
subject.ST="State"
subject.C="US"
csr = R509::CSR.new( :subject => subject )
```

To load an existing CSR (without private key)

```ruby
csr_pem = File.read("/path/to/csr")
csr = R509::CSR.new(:csr => csr_pem)
# or
csr = R509::CSR.load_from_file("/path/to/csr")
```

To create a new CSR from the subject of a certificate

```ruby
cert_pem = File.read("/path/to/cert")
csr = R509::CSR.new(:cert => cert_pem)
```

To create a CSR with SAN names

```ruby
csr = R509::CSR.new(
  :subject => [['CN','something.com']],
  :san_names => ["something2.com","something3.com"]
)
```

###Cert
To load an existing certificate

```ruby
cert_pem = File.read("/path/to/cert")
cert = R509::Cert.new(:cert => cert_pem)
# or
cert = R509::Cert.load_from_file("/path/to/cert")
```

Load a cert and key

```ruby
cert_pem = File.read("/path/to/cert")
key_pem = File.read("/path/to/key")
cert = R509::Cert.new(
  :cert => cert_pem,
  :key => key_pem
)
```

Load an encrypted private key

```ruby
cert_pem = File.read("/path/to/cert")
key_pem = File.read("/path/to/key")
cert = R509::Cert.new(
  :cert => cert_pem,
  :key => key_pem,
  :password => "private_key_password"
)
```

Load a PKCS12 file

```ruby
pkcs12_der = File.read("/path/to/p12")
cert = R509::Cert.new(
  :pkcs12 => pkcs12_der,
  :password => "password"
)
```

###PrivateKey
Generate a 1536-bit RSA key

```ruby
key = R509::PrivateKey.new(:type => "RSA", :bit_length => 1536)
```

Encrypt a private key

```ruby
key = R509::PrivateKey.new(:type => "RSA", :bit_length => 2048)
encrypted_pem = key.to_encrypted_pem("aes256","my-password")
# or write it to disk
key.write_encrypted_pem("/tmp/path","aes256","my-password")
```

####Load Hardware Engines in PrivateKey

The engine you want to load must already be available to OpenSSL. How to compile/install OpenSSL engines is outside the scope of this document.

```ruby
engine = R509::Engine.instance.load(:so_path => "/usr/lib64/openssl/engines/libchil.so", :id => "chil")
key = R509::PrivateKey(
  :engine => engine,
  :key_name => "my_key_name"
)
```

You can then use this key for signing.

###SPKI/SPKAC
To generate a 2048-bit RSA SPKI

```ruby
key = R509::PrivateKey.new(:type => "RSA", :bit_length => 1024)
spki = R509::SPKI.new(:key => key)
```

###Self-Signed Certificate
To create a self-signed certificate

```ruby
not_before = Time.now.to_i
not_after = Time.now.to_i+3600*24*7300
csr = R509::CSR.new(
  :subject => [['C','US'],['O','r509 LLC'],['CN','r509 Self-Signed CA Test']]
)
# if you do not pass :extensions it will add basic constraints CA:TRUE, a SubjectKeyIdentifier, and an AuthorityKeyIdentifier
cert = R509::CertificateAuthority::Signer.selfsign(
  :csr => csr,
  :not_before => not_before,
  :not_after => not_after
)
```

###Config

####CAConfig
Create a basic CAConfig object

```ruby
cert_pem = File.read("/path/to/cert")
key_pem = File.read("/path/to/key")
cert = R509::Cert.new(
  :cert => cert_pem,
  :key => key_pem
)
config = R509::Config::CAConfig.new(
  :ca_cert => cert
)
```

####SubjectItemPolicy
Subject Item Policy allows you to define what subject fields are allowed in a certificate. Required means that field *must* be supplied, optional means it will be encoded if provided, and match means the field must be present and must match the value specified. The keys must match OpenSSL's short names.


```ruby
sip = 509::Config::SubjectItemPolicy.new(
  "CN" => {:policy => "required"},
  "O" => {:policy => "optional"},
  "OU" => {:policy => "match", :value => "Engineering" }
)
```

####CertProfile
Certificate profiles hold extensions you want to put in a certificate, allowed/default message digests, and subject item policies. You can build them programmatically or load them via YAML. When building programmatically you can also serialize to YAML for future use. This is the preferred way to build the YAML.

The CertProfile object can either take objects or the hash that would build those objects.

Objects:

```ruby
profile = R509::Config::CertProfile.new(
  :basic_constraints => R509::Cert::Extensions::BasicConstraints.new(
    :ca => false
  ),
  :key_usage => R509::Cert::Extensions::KeyUsage.new(
    :value => ['digitalSignature','keyEncipherment']
  ),
  :extended_key_usage => R509::Cert::Extensions::ExtendedKeyUsage.new(
    :value => ['serverAuth','clientAuth']
  ),
  :authority_info_access => R509::Cert::Extensions::AuthorityInfoAccess.new(
    :ocsp_location => [{:type => 'URI', :value => 'http://ocsp.myca.net'}]
  ),
  :certificate_policies => R509::Cert::Extensions::CertificatePolicies.new(
    :value => [{:policy_identifier => '1.23.3.4.4.5.56'}]
  ),
  :crl_distribution_points => R509::Cert::Extensions::CRLDistributionPoints.new(
    :value => [{:type => 'URI', :value => 'http://crl.myca.net/ca.crl'}]
  ),
  :inhibit_any_policy => R509::Cert::Extensions::InhibitAnyPolicy.new(
    :value => 0
  ),
  :name_constraints => R509::Cert::Extensions::NameConstraints.new(
    :permitted => [{:type => 'dirName', :value => { :CN => 'test' } }]
  ),
  :ocsp_no_check => R509::Cert::Extensions::OCSPNoCheck.new(:value => true),
  :policy_constraints => R509::Cert::Extensions::PolicyConstraints.new(
    :require_explicit_policy=> 1
  ),
  :subject_item_policy => R509::Config::SubjectItemPolicy.new(
    "CN" => {:policy => "required"},
    "O" => {:policy => "optional"},
    "OU" => {:policy => "match", :value => "Engineering" }
  ),
  :default_md => "SHA256",
  :allowed_mds => ["SHA256","SHA512"]
)
```

Hashes:

```ruby
profile = R509::Config::CertProfile.new(
  :basic_constraints => {:ca => false},
  :key_usage => { :value => ["digitalSignature","keyEncipherment"] },
  :extended_key_usage => { :value => ["serverAuth"] },
  :certificate_policies => [
    { :policy_identifier => "2.16.840.1.99999.21.234",
      :cps_uris => ["http://example.com/cps","http://haha.com"],
      :user_notices => [ { :explicit_text => "this is a great thing", :organization => "my org", :notice_numbers => [1,2,3] } ]
    }
  ],
  :subject_item_policy => nil,
  :crl_distribution_points => {:value => [{ :type => "URI", :value => "http://crl.myca.net/ca.crl" }] },
  :authority_info_access => {
    :ocsp_location => [{ :type => "URI", :value => "http://ocsp.myca.net" }],
    :ca_issuers_location => [{ :type => "URI", :value => "http://www.myca.net/some_ca.cer" }]
  }
)
# CAConfig object from above assumed
config.set_profile("server",profile)
```

####CAConfigPool
Multiple CAConfigs can be loaded via CAConfigPool

```ruby
# from objects
pool = R509::Config::CAConfigPool.new("my_ca" => config, "another_ca" => another_config)
# from yaml
pool = R509::Config::CAConfigPool.from_yaml("certificate_authorities", "config_pool.yaml")
```

Example (Minimal) Config Pool YAML

```yaml
certificate_authorities:
  test_ca:
    ca_cert:
      cert: test_ca.cer
      key: test_ca.key
  second_ca:
    ca_cert:
      cert: second_ca.cer
      key: second_ca.key
```

####Building YAML
You can serialize a CAConfig (or CAConfigPool) via ```#to_yaml```. The output of the YAML will vary depending upon what data you have supplied to the object, but the output does require the following manual configuration:

* Add paths to the requested files where you see add_path (or change the options entirely. See the YAML config section below)
* Define a name for your config and put the YAML inside it. In the example below the config has been named example_ca

```yaml
example_ca:
  # the following is the output of #to_yaml
  ca_cert:
    cert: <add_path>
    key: <add_path>
  ocsp_start_skew_seconds: 3600
  ocsp_validity_hours: 168
  crl_md: SHA1
  profiles:
    profile:
      subject_item_policy:
        CN:
          :policy: required
        O:
          :policy: required
        L:
          :policy: required
        OU:
          :policy: optional
      default_md: SHA512
```

###CertificateAuthority::Signer (sans CertProfile)

Sign a CSR

```ruby
csr = R509::CSR.new(
  :subject => {
    :CN => 'somedomain.com',
    :O => 'My Org',
    :L => 'City',
    :ST => 'State',
    :C => 'US'
  }
)
# assume config from yaml load above
ca = R509::CertificateAuthority::Signer.new(config)
ext = []
# you can add extensions in an array. See R509::Cert::Extensions::*
ext << R509::Cert::Extensions::BasicConstraints.new(:ca => false)

cert = ca.sign(
  :csr => csr,
  :extensions => ext
)
```

Override a CSR's subject or SAN names when signing

```ruby
csr = R509::CSR.new(
  :subject => {
    :CN => 'somedomain.com',
    :O => 'My Org',
    :L => 'City',
    :ST => 'State',
    :C => 'US'
  }
)
subject = csr.subject.dup
san_names = ["sannames.com","domain2.com","128.128.128.128"]
subject.common_name = "newdomain.com"
subject.organization = "Org 2.0"
ext = []
ext << R509::Cert::Extensions::BasicConstraints.new(:ca => false)
ext << R509::Cert::Extensions::SubjectAlternativeName.new(:names => san_names)
# assume config from yaml load above
ca = R509::CertificateAuthority::Signer.new(config)
cert = ca.sign(
  :csr => csr,
  :subject => subject,
  :extensions => ext
)
```

Sign an SPKI/SPKAC object

```ruby
key = R509::PrivateKey.new(:type => "RSA", :bit_length => 2048)
spki = R509::SPKI.new(:key => key)
# SPKI objects do not contain subject or san name data so it must be specified
subject = R509::Subject.new
subject.CN = "mydomain.com"
subject.L = "Locality"
subject.ST = "State"
subject.C = "US"
san_names = ["domain2.com","128.128.128.128"]
ext = []
ext << R509::Cert::Extensions::BasicConstraints.new(:ca => false)
ext << R509::Cert::Extensions::SubjectAlternativeName.new(:value => san_names)
# assume config from yaml load above
ca = R509::CertificateAuthority::Signer.new(config)
cert = ca.sign(
  :spki => spki,
  :subject => subject,
  :extensions => ext
)

```

###CertificateAuthority::ProfileEnforcer
The ProfileEnforcer takes in a CAConfig with CertProfiles. You then call #enforce to have it enforce a profile's constraints. Constraints include subject DN, message_digest, subject alternative names, and extensions.

```ruby
# assume config from yaml load above
csr = R509::CSR.new(
  :subject => {
    :CN => 'somedomain.com',
    :O => 'My Org',
    :L => 'City',
    :ST => 'State',
    :C => 'US'
  }
)
enforcer = R509::CertificateAuthority::ProfileEnforcer.new(config)
scrubbed_data = enforcer.enforce(
  :csr => csr,
  :profile_name => "server",
  :subject => {:CN => 'rewritten.com'},
  :san_names => ['r509.org'],
  :message_digest => 'SHA256'
)
# this returns a hash with keys :csr/:pki, :subject, :extensions, and :message_digest
signer = R509::CertificateAuthority::Signer.new(config)
cert = signer.sign(scrubbed_data)

```

###CRL Administration
The CRL administrator object takes an ```R509::Config::CAConfig``` and an optional ```R509::CRL::ReaderWriter``` subclass. By default it will use an ```R509::CRL::FileReaderWriter``` class that assumes the presence of ```crl_number_file``` and ```crl_list_file``` in the CAConfig.

```ruby
admin = R509::CRL::Administrator.new(config)
```

####Revoking a certificate
To revoke a certificate and generate a new CRL

```ruby
admin.revoke_cert(serial)
crl = admin.generate_crl
```

This revokes on the root configured by the CAConfig that was passed into the Administrator constructor.

###OID Mapping

Register one

```ruby
R509::OIDMapper.register("1.3.5.6.7.8.3.23.3","short_name","optional_long_name")
```

Register in batch

```ruby
R509::OIDMapper.batch_register([
  {:oid => "1.3.5.6.7.8.3.23.3", :short_name => "short_name", :long_name => "optional_long_name"},
  {:oid => "1.3.5.6.7.8.3.23.5", :short_name => "another_name"}
])
```

###Alternate Key Algorithms
In addition to the default RSA objects that are created above, r509 supports DSA and elliptic curve (EC). EC support is present only if Ruby has been linked against a version of OpenSSL compiled with EC enabled. This excludes Red Hat-based distributions at this time (unless you build it yourself). Take a look at the documentation for R509::PrivateKey, R509::Cert, and R509::CSR to see how to create DSA and EC types. You can test if elliptic curve support is available in your Ruby with:

```ruby
R509.ec_supported?
```

####NIST Recommended Elliptic Curves
These curves are set via ```:curve_name```. The system defaults to using ```secp384r1```

 * secp224r1 -- NIST/SECG curve over a 224 bit prime field
 * secp384r1 -- NIST/SECG curve over a 384 bit prime field
 * secp521r1 -- NIST/SECG curve over a 521 bit prime field
 * prime192v1 -- NIST/X9.62/SECG curve over a 192 bit prime field
 * sect163k1 -- NIST/SECG/WTLS curve over a 163 bit binary field
 * sect163r2 -- NIST/SECG curve over a 163 bit binary field
 * sect233k1 -- NIST/SECG/WTLS curve over a 233 bit binary field
 * sect233r1 -- NIST/SECG/WTLS curve over a 233 bit binary field
 * sect283k1 -- NIST/SECG curve over a 283 bit binary field
 * sect283r1 -- NIST/SECG curve over a 283 bit binary field
 * sect409k1 -- NIST/SECG curve over a 409 bit binary field
 * sect409r1 -- NIST/SECG curve over a 409 bit binary field
 * sect571k1 -- NIST/SECG curve over a 571 bit binary field
 * sect571r1 -- NIST/SECG curve over a 571 bit binary field

##Documentation
There is documentation available for every method and class in r509 available via yardoc. You can view the latest release docs at [r509.org](http://r509.org). If you installed via gem it should be pre-generated in the doc directory. If you cloned this repo, just type ```rake yard``` with the yard gem installed. You will also need the redcarpet and github-markup gems to properly parse the README.md.

##Created by...
[Paul Kehrer](https://github.com/reaperhulk)

##Thanks to...
* [Sean Schulte](https://github.com/sirsean)
* [Mike Ryan](https://github.com/justfalter)

##License
See the LICENSE file. Licensed under the Apache 2.0 License.

#YAML Config Options
r509 configs are nested hashes that define the behavior of each CA. See r509.yaml for a full example config. These options can also be defined programmatically via R509::Config::CAConfig and R509::Config::CertProfile.

##ca\_name
###ca\_cert
This hash defines the certificate + key that will be used to sign for the ca\_name. Depending on desired configuration various elements are optional. You can even supply just __cert__ (for example, if you are using an ocsp\_cert hash and only using the configured CA for OCSP responses)

* cert (cannot use with pkcs12)
* key (optional, cannot use with pkcs12)
* engine (optional, cannot be used with key or pkcs12. Must be a hash with :so_path and :id keys)
* key\_name (required when using engine)
* pkcs12 (optional, cannot be used with key or cert)
* password (optional, used for pkcs12 or passworded private key)

###ocsp\_cert
This hash defines the certificate + key that will be used to sign for OCSP responses. OCSP responses cannot be directly created with r509, but require the ancillary gem [r509-ocsp-responder](https://github.com/reaperhulk/r509-ocsp-responder). This hash is optional and if not provided r509 will automatically use the ca\_cert as the OCSP certificate.

* cert (cannot use with pkcs12)
* key (optional, cannot use with pkcs12)
* engine (optional, cannot be used with key or pkcs12. Must be a hash with SO_PATH and ID keys)
* key\_name (required when using engine)
* pkcs12 (optional, cannot be used with key or cert)
* password (optional, used for pkcs12 or passworded private key)

###crl\_cert
This hash defines the certificate + key that will be used to sign CRLs. This hash is optional and if not provided r509 will automatically use the ca\_cert as the CRL delegate certificate.

* cert (cannot use with pkcs12)
* key (optional, cannot use with pkcs12)
* engine (optional, cannot be used with key or pkcs12. Must be a hash with SO_PATH and ID keys)
* key\_name (required when using engine)
* pkcs12 (optional, cannot be used with key or cert)
* password (optional, used for pkcs12 or passworded private key)

###crl\_list
The path on the filesystem of the list of revoked certificates for this CA.

Example: '/path/to/my\_ca\_crl\_list.txt'

###crl\_number
The path on the filesystem of the current CRL number for this CA.

Example: '/path/to/my\_ca\_crl\_number.txt'

###crl\_validity\_hours
Integer hours for CRL validity.

###ocsp\_chain
An optional path to a concatenated text file of PEMs that should be attached to OCSP responses

###ocsp\_validity\_hours
Integer hours for OCSP response validity.

###ocsp\_start\_skew\_seconds
Integer seconds to skew back the "thisUpdate" field. This prevents issues where the OCSP responder signs a response and the client rejects it because the response is "not yet valid" due to slight clock synchronization problems.

###message\_digest
String value of the message digest to use for signing (both CRL and certificates). Allowed values are:

* SHA1 (default)
* SHA224
* SHA256
* SHA384
* SHA512
* MD5 (Don't use this unless you have a really, really good reason. Even then, you shouldn't)

###profiles
Each CA can have an arbitrary number of issuance profiles (with arbitrary names). For example, a CA named __test\_ca__ might have 3 issuance profiles: server, email, clientserver. Each of these profiles then has a set of options that define the encoded extensions in the certificate for that profile. If no profiles are defined the root cannot issue certs, but can still issue CRLs.

Profiles are defined by an object (R509::Config::CertProfile) and can be serialized to YAML after being built via ```#to_yaml```. This is the suggested way to generate the profile YAML.

###Example YAML

This example YAML would be loaded via ```R509::Config::CAConfigPool.from_yaml```. It has a CA named test_ca and a profile named server.

```yaml
certificate_authorities:
  test_ca:
    ca_cert:
      cert: /path/to/test_ca.cer
      key: /path/to/test_ca.key
    crl_list_file: crl_list_file.txt
    crl_number_file: crl_number_file.txt
    crl_validity_hours: 168
    profiles:
      server:
        basic_constraints:
          :ca: false
        key_usage:
          :critical: false
          :value:
          - digitalSignature
          - keyEncipherment
        extended_key_usage:
          :value:
          - serverAuth
        certificate_policies:
          :value:
          - :policy_identifier: 2.16.840.1.99999.21.234
            :cps_uris:
            - http://example.com/cps
            - http://haha.com
            :user_notices:
            - :explicit_text: this is a great thing
              :organization: my org
              :notice_numbers:
              - 1
              - 2
              - 3
          - :policy_identifier: 2.16.840.1.99999.21.235
            :cps_uris:
            - http://example.com/cps2
            :user_notices:
            - :explicit_text: this is a bad thing
              :organization: another org
              :notice_numbers:
              - 3
              - 2
              - 1
            - :explicit_text: another user notice
        subject_item_policy:
            CN:
              :policy: required
            O:
              :policy: required
            OU:
              :policy: match
              :value: Engineering
            ST:
              :policy: required
            C:
              :policy: required
            L:
              :policy: optional
        crl_distribution_points:
          :value:
          - :type: URI
            :value: http://crl.domain.com/test_ca.crl
        authority_info_access:
          :ocsp_location:
          - :type: URI
            :value: http://ocsp.domain.com
          :ca_issuers_location:
          - :type: URI
            :value: http://www.domain.com/my_roots.html
        default_md: SHA1
        allowed_mds:
        - SHA256
        - SHA1
```
